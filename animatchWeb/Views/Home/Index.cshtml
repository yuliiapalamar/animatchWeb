@model Tuple<List<Anime>, List<Genre>>

@{
    ViewData["Title"] = "Home Page";
}

<main>
    

	<div class="container home-search">
		<form asp-action="Index" asp-controller="Home" method="get" class="d-flex search-form" role="search">
			<input class="form-control mx-5" type="search" placeholder="введіть назву" aria-label="Search" name="searchString">
			<button class="btn-border" type="submit" id="searchButton">пошук</button>

			<button type="button" class="button" id="showFilters"><i class="bi bi-stars fa-2xl" style="color:#db7093"></i></button>
		</form>
	</div>
    
	<div class="container p-5">
		<div class="row">
			<div class="col-md-12">
				
                
				<form id="filterForm" asp-action="Index" asp-controller="Home" method="get" style="display: none;">
					<div class="form-group">
						<label>Оберіть жанри:</label>
						<div class="btn-group-toggle" data-toggle="buttons">
							@foreach (var genre in Model.Item2)
							{
								<label class="btn-border genre-btn">
									<input type="checkbox" autocomplete="on" name="genreIds" value="@genre.Id"> @genre.Name
								</label>
							}
						</div>
					</div>
					<div class="flex-row gap-1">
					<button type="submit" class="btn-border" id="applyFilters">Фільтрувати</button>
					<button type="button" class="btn-border" id="resetFilters">Скинути фільтри</button>
					</div>
				</form>
			</div>
		</div>
	</div>

	<div class="container ">
        <div class="row" id="animeList">
            @foreach (var item in Model.Item1)
            {
                <div class="col-lg-3 col-md-6 col-sm-12">
                    <a asp-area="" class="card-a" asp-controller="Home" asp-action="Details" asp-route-id="@item.Id">
                        <div class="card">
                            <img src="@item.Photo" class="card-img-top" alt="...">
                            <div class="card-body">
                                <p class="card-text">@item.Name</p>
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
    </div>
</main>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Відслідковування змін у чекбоксі
        $('.genre-btn input[type="checkbox"]').change(function () {
            if (this.checked) {
                // Якщо чекбокс вибраний, змінити задній фон батьківського елемента
                $(this).parent().addClass('selected-background');
            } else {
                // Якщо чекбокс скасований, видалити зміни з заднього фону батьківського елемента
                $(this).parent().removeClass('selected-background');
            }
            saveSelectedGenres(); // Збереження обраних жанрів у localStorage після кожної зміни
        });

        // Відновлення стану фільтрів після завантаження сторінки
        restoreFilters();

        // Функція для збереження обраних жанрів у localStorage
        function saveSelectedGenres() {
            var selectedGenres = [];
            $('.genre-btn input[type="checkbox"]:checked').each(function () {
                var genreId = $(this).val();
                selectedGenres.push(genreId);
            });
            localStorage.setItem('selectedGenres', JSON.stringify(selectedGenres));
        }

        // Функція для відновлення стану чекбоксів жанрів
        function restoreFilters() {
            var selectedGenres = JSON.parse(localStorage.getItem('selectedGenres')) || [];
            $('.genre-btn input[type="checkbox"]').each(function () {
                var genreId = $(this).val();
                $(this).prop('checked', selectedGenres.includes(genreId));
                // Встановлюємо задній фон відповідно до стану чекбоксів
                if ($(this).prop('checked')) {
                    $(this).parent().addClass('selected-background');
                } else {
                    $(this).parent().removeClass('selected-background');
                }
            });
        }

        // Показати блок фільтрів
        $('#showFilters').click(function () {
            $('#filterForm').toggle();
        });

        // Обробка натискання кнопки "Фільтрувати"
        $('#applyFilters').click(function () {
            applyFilters(); // Застосовуємо фільтри після натискання кнопки "Фільтрувати"
        });

        // Скидання обраних фільтрів
        $('#resetFilters').click(function () {
            $('.genre-btn input[type="checkbox"]').prop('checked', false);
            $('.genre-btn').removeClass('selected-background'); // Видалення заднього фону у всіх елементів
            localStorage.removeItem('selectedGenres'); // Видалення збережених обраних жанрів
            applyFilters(); // Застосовуємо фільтри після зняття галочок
        });

        // Функція для застосування фільтрів і оновлення списку аніме
        function applyFilters() {
            var searchString = $('input[name="searchString"]').val();
            var genreIds = []; // Масив для збереження обраних жанрів
            $('.genre-btn input[type="checkbox"]:checked').each(function () {
                genreIds.push($(this).val());
            });

            // Отримання списку аніме з застосованими фільтрами
            $.ajax({
                url: '/Anime/Search',
                type: 'GET',
                data: { searchString: searchString, genreIds: genreIds },
                success: function (data) {
                    $('#animeList').empty().html(data); // Оновлюємо список аніме на сторінці з отриманими даними
                },
                error: function () {
                    console.log('Error while searching anime.');
                }
            });
        }

        // Обробка події натискання кнопки "пошук"
        $('#searchButton').click(function (e) {
            e.preventDefault(); // Зупиняємо дії форми за замовчуванням
            applyFilters(); // Застосовуємо фільтри після натискання кнопки пошуку
        });

        // При завантаженні сторінки застосовуємо фільтри і підгружаємо список аніме
        applyFilters();
    });

</script>

<style>
    .btn-group-toggle {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
    }

    .form-group {

    }

    .genre-btn input[type="checkbox"] {
	    display: none;
    }

    /* Стилізуємо власну галочку */
    .genre-btn input[type="checkbox"] + label::before {
	    content: "\2713"; /* Відображення галочки */
	    font-size: 18px;
	    color: #ff69b4; /* Рожевий колір для галочки */
	    display: inline-block;
	    width: 1em;
	    height: 1em;
	    line-height: 1em;
	    text-align: center;
	    vertical-align: middle;
	    border: 1px solid #ff69b4; /* Рамка галочки */
	    border-radius: 3px; /* Закругленість рамки */
	    background-color: transparent; /* Фон */
	    margin-right: 5px;
    }

    /* Зміна кольору галочки при виборі чекбокса */
    .genre-btn input[type="checkbox"]:checked + label::before {
	    background-color: #ff69b4; /* Рожевий колір фону галочки */
	    color: #fff; /* Колір тексту (галочки) */
    }

    .genre-btn input[type="checkbox"]:not(:checked) + label {
	    background-color: #ffe5ec; /* Напіврожевий колір фону */
    }
    .genre-btn {
        white-space: nowrap; /* Запобігає перенесенню тексту на новий рядок */
    }
    .selected-background {
	    background-color: #ff69b4; /* Рожевий колір фону */
	    color: #fff; /* Колір тексту (якщо потрібно змінити текст на білий) */
	    box-shadow: 0 0 5px rgba(128, 0, 128, 0.5); /* Приклад тіні при фокусі */
    }
    .button:active {
	    outline: none;
	    border: none;
    }
    .button:focus {
	    outline: none;
	    border: none;
    }
    .button {
	    border: none;
	    background-color: transparent;
	    cursor: pointer;
	    align-items: center;
        display: flex;
	    justify-content: center;
	    align-self: center;
	    justify-content: center;
        padding: 10px;
	    margin-left: 15px;

	}

</style>
